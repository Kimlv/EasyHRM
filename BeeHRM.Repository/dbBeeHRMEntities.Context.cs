//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BeeHRM.Repository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbBeeHRMEntities : DbContext
    {
        public dbBeeHRMEntities()
            : base("name=dbBeeHRMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AppConfig> AppConfigs { get; set; }
        public virtual DbSet<AppLicense> AppLicenses { get; set; }
        public virtual DbSet<ApprisalRegion> ApprisalRegions { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AttDaily> AttDailies { get; set; }
        public virtual DbSet<AttEmployeeLog> AttEmployeeLogs { get; set; }
        public virtual DbSet<AttendaceDaily> AttendaceDailies { get; set; }
        public virtual DbSet<AttendaceDevice> AttendaceDevices { get; set; }
        public virtual DbSet<AttendaceLog> AttendaceLogs { get; set; }
        public virtual DbSet<AttendanceRequest> AttendanceRequests { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<BusinessGroup> BusinessGroups { get; set; }
        public virtual DbSet<Calender> Calenders { get; set; }
        public virtual DbSet<CalenderMonth> CalenderMonths { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Darbandi> Darbandis { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DeptHead> DeptHeads { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<DocumentCategory> DocumentCategories { get; set; }
        public virtual DbSet<EducationLevel> EducationLevels { get; set; }
        public virtual DbSet<EmployeeAddress> EmployeeAddresses { get; set; }
        public virtual DbSet<EmployeeBank> EmployeeBanks { get; set; }
        public virtual DbSet<EmployeeDetail> EmployeeDetails { get; set; }
        public virtual DbSet<EmployeeDocument> EmployeeDocuments { get; set; }
        public virtual DbSet<EmployeeEducation> EmployeeEducations { get; set; }
        public virtual DbSet<EmployeeExperience> EmployeeExperiences { get; set; }
        public virtual DbSet<EmployeeFamily> EmployeeFamilies { get; set; }
        public virtual DbSet<EmployeeGradeUpdate> EmployeeGradeUpdates { get; set; }
        public virtual DbSet<EmployeeJobHistory> EmployeeJobHistories { get; set; }
        public virtual DbSet<EmployeePrize> EmployeePrizes { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeSkill> EmployeeSkills { get; set; }
        public virtual DbSet<EmployeeVisit> EmployeeVisits { get; set; }
        public virtual DbSet<EmpTraining> EmpTrainings { get; set; }
        public virtual DbSet<Ethnicity> Ethnicities { get; set; }
        public virtual DbSet<Fiscal> Fiscals { get; set; }
        public virtual DbSet<Grade> Grades { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<InsuranceCompany> InsuranceCompanies { get; set; }
        public virtual DbSet<JobType> JobTypes { get; set; }
        public virtual DbSet<LeaveApplication> LeaveApplications { get; set; }
        public virtual DbSet<LeaveAssigned> LeaveAssigneds { get; set; }
        public virtual DbSet<LeaveEarned> LeaveEarneds { get; set; }
        public virtual DbSet<LeaveMonthlyAssgnement> LeaveMonthlyAssgnements { get; set; }
        public virtual DbSet<LeaveMonthlyProcess> LeaveMonthlyProcesses { get; set; }
        public virtual DbSet<LeaveRuleDetail> LeaveRuleDetails { get; set; }
        public virtual DbSet<LeaveRule> LeaveRules { get; set; }
        public virtual DbSet<LeaveType> LeaveTypes { get; set; }
        public virtual DbSet<LeaveYearlyProcess> LeaveYearlyProcesses { get; set; }
        public virtual DbSet<LeaveYear> LeaveYears { get; set; }
        public virtual DbSet<Level> Levels { get; set; }
        public virtual DbSet<LocationDistrict> LocationDistricts { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<OfficeHead> OfficeHeads { get; set; }
        public virtual DbSet<Office> Offices { get; set; }
        public virtual DbSet<OfficeType> OfficeTypes { get; set; }
        public virtual DbSet<PayrollAllowanceDetail> PayrollAllowanceDetails { get; set; }
        public virtual DbSet<PayrollAllowanceMaster> PayrollAllowanceMasters { get; set; }
        public virtual DbSet<PayrollArrear> PayrollArrears { get; set; }
        public virtual DbSet<PayrollAttendanceMonthly> PayrollAttendanceMonthlies { get; set; }
        public virtual DbSet<PayrollConfig> PayrollConfigs { get; set; }
        public virtual DbSet<PayrollEmployeeTaxDetail> PayrollEmployeeTaxDetails { get; set; }
        public virtual DbSet<PayrollInsurancePremium> PayrollInsurancePremiums { get; set; }
        public virtual DbSet<PayrollIntrestGain> PayrollIntrestGains { get; set; }
        public virtual DbSet<payrollLeaveDay> payrollLeaveDays { get; set; }
        public virtual DbSet<PayrollLeaveDeduction> PayrollLeaveDeductions { get; set; }
        public virtual DbSet<PayrollMonthDescription> PayrollMonthDescriptions { get; set; }
        public virtual DbSet<PayrollOvertime> PayrollOvertimes { get; set; }
        public virtual DbSet<PayrollRemoteAllowance> PayrollRemoteAllowances { get; set; }
        public virtual DbSet<PayrollRemoteSetup> PayrollRemoteSetups { get; set; }
        public virtual DbSet<PayrollSalaryDetailSheet> PayrollSalaryDetailSheets { get; set; }
        public virtual DbSet<PayrollSalaryMasterSheet> PayrollSalaryMasterSheets { get; set; }
        public virtual DbSet<PayrollSalaryTable> PayrollSalaryTables { get; set; }
        public virtual DbSet<PayrollTaxDetail> PayrollTaxDetails { get; set; }
        public virtual DbSet<PayrollTaxSetup> PayrollTaxSetups { get; set; }
        public virtual DbSet<PromotionType> PromotionTypes { get; set; }
        public virtual DbSet<Rank> Ranks { get; set; }
        public virtual DbSet<Religion> Religions { get; set; }
        public virtual DbSet<RemoteArea> RemoteAreas { get; set; }
        public virtual DbSet<ReportingGroupMember> ReportingGroupMembers { get; set; }
        public virtual DbSet<ReportingGroup> ReportingGroups { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RolesAccess> RolesAccesses { get; set; }
        public virtual DbSet<RolesBusinessGroupAccess> RolesBusinessGroupAccesses { get; set; }
        public virtual DbSet<Section> Sections { get; set; }
        public virtual DbSet<ServiceEventGroup> ServiceEventGroups { get; set; }
        public virtual DbSet<ServiceEventSubGroup> ServiceEventSubGroups { get; set; }
        public virtual DbSet<ShiftDay> ShiftDays { get; set; }
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<Skill> Skills { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<UserLoginLog> UserLoginLogs { get; set; }
        public virtual DbSet<Zone> Zones { get; set; }
        public virtual DbSet<Approver> Approvers { get; set; }
        public virtual DbSet<HolidayAssignedOffice> HolidayAssignedOffices { get; set; }
        public virtual DbSet<PayrollEmployeeSetup> PayrollEmployeeSetups { get; set; }
        public virtual DbSet<V_LeaveDeduction> V_LeaveDeduction { get; set; }
        public virtual DbSet<V_LeaveTaken> V_LeaveTaken { get; set; }
        public virtual DbSet<V_LeaveTotalAssigned> V_LeaveTotalAssigned { get; set; }
        public virtual DbSet<vname> vnames { get; set; }
    
        [DbFunction("dbBeeHRMEntities", "emp_EmpOfficeId")]
        public virtual IQueryable<emp_EmpOfficeId_Result> emp_EmpOfficeId(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<emp_EmpOfficeId_Result>("[dbBeeHRMEntities].[emp_EmpOfficeId](@RoleId)", roleIdParameter);
        }
    
        [DbFunction("dbBeeHRMEntities", "fn_MyRoleBusinessGroups")]
        public virtual IQueryable<fn_MyRoleBusinessGroups_Result> fn_MyRoleBusinessGroups(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_MyRoleBusinessGroups_Result>("[dbBeeHRMEntities].[fn_MyRoleBusinessGroups](@RoleId)", roleIdParameter);
        }
    
        public virtual int AttUpdateAttendanceLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AttUpdateAttendanceLog");
        }
    
        public virtual int AttUpdateAttendanceLogByDate(Nullable<System.DateTime> updateDate)
        {
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("updateDate", updateDate) :
                new ObjectParameter("updateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AttUpdateAttendanceLogByDate", updateDateParameter);
        }
    
        public virtual int CleanUpPayrollTable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CleanUpPayrollTable");
        }
    
        public virtual int InsertDailyDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDailyDate");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<sp_ApproverByOffice_Result> sp_ApproverByOffice(Nullable<int> officeId)
        {
            var officeIdParameter = officeId.HasValue ?
                new ObjectParameter("OfficeId", officeId) :
                new ObjectParameter("OfficeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ApproverByOffice_Result>("sp_ApproverByOffice", officeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> sp_AttDate(Nullable<System.DateTime> sdate, Nullable<System.DateTime> enddate, Nullable<int> officeId)
        {
            var sdateParameter = sdate.HasValue ?
                new ObjectParameter("sdate", sdate) :
                new ObjectParameter("sdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var officeIdParameter = officeId.HasValue ?
                new ObjectParameter("OfficeId", officeId) :
                new ObjectParameter("OfficeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("sp_AttDate", sdateParameter, enddateParameter, officeIdParameter);
        }
    
        public virtual ObjectResult<sp_AttendanceApprover_Result> sp_AttendanceApprover(Nullable<int> empCode)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AttendanceApprover_Result>("sp_AttendanceApprover", empCodeParameter);
        }
    
        public virtual ObjectResult<sp_AttendanceDaily_Result> sp_AttendanceDaily(string startDate, Nullable<int> officeID, Nullable<int> degID, Nullable<int> empCode, Nullable<int> deptId, Nullable<int> empTypeId)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var officeIDParameter = officeID.HasValue ?
                new ObjectParameter("OfficeID", officeID) :
                new ObjectParameter("OfficeID", typeof(int));
    
            var degIDParameter = degID.HasValue ?
                new ObjectParameter("DegID", degID) :
                new ObjectParameter("DegID", typeof(int));
    
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var empTypeIdParameter = empTypeId.HasValue ?
                new ObjectParameter("EmpTypeId", empTypeId) :
                new ObjectParameter("EmpTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AttendanceDaily_Result>("sp_AttendanceDaily", startDateParameter, officeIDParameter, degIDParameter, empCodeParameter, deptIdParameter, empTypeIdParameter);
        }
    
        public virtual ObjectResult<sp_AttendanceDailyByDateRange_Result> sp_AttendanceDailyByDateRange(string searchStartdate, string searchEnddate, Nullable<int> empCode)
        {
            var searchStartdateParameter = searchStartdate != null ?
                new ObjectParameter("SearchStartdate", searchStartdate) :
                new ObjectParameter("SearchStartdate", typeof(string));
    
            var searchEnddateParameter = searchEnddate != null ?
                new ObjectParameter("SearchEnddate", searchEnddate) :
                new ObjectParameter("SearchEnddate", typeof(string));
    
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AttendanceDailyByDateRange_Result>("sp_AttendanceDailyByDateRange", searchStartdateParameter, searchEnddateParameter, empCodeParameter);
        }
    
        public virtual ObjectResult<sp_AttendanceDailyById_Result> sp_AttendanceDailyById(Nullable<int> empCode)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AttendanceDailyById_Result>("sp_AttendanceDailyById", empCodeParameter);
        }
    
        public virtual ObjectResult<sp_AttendanceEntireYearReport_Result> sp_AttendanceEntireYearReport(Nullable<int> empCode, Nullable<int> fiscalYear, Nullable<int> nepaliMonth)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("empCode", empCode) :
                new ObjectParameter("empCode", typeof(int));
    
            var fiscalYearParameter = fiscalYear.HasValue ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(int));
    
            var nepaliMonthParameter = nepaliMonth.HasValue ?
                new ObjectParameter("nepaliMonth", nepaliMonth) :
                new ObjectParameter("nepaliMonth", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AttendanceEntireYearReport_Result>("sp_AttendanceEntireYearReport", empCodeParameter, fiscalYearParameter, nepaliMonthParameter);
        }
    
        public virtual ObjectResult<sp_AttendanceEntireYearReportSummary_Result> sp_AttendanceEntireYearReportSummary(Nullable<int> empCode, Nullable<int> fiscalYear, Nullable<int> nepaliMonth)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("empCode", empCode) :
                new ObjectParameter("empCode", typeof(int));
    
            var fiscalYearParameter = fiscalYear.HasValue ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(int));
    
            var nepaliMonthParameter = nepaliMonth.HasValue ?
                new ObjectParameter("nepaliMonth", nepaliMonth) :
                new ObjectParameter("nepaliMonth", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AttendanceEntireYearReportSummary_Result>("sp_AttendanceEntireYearReportSummary", empCodeParameter, fiscalYearParameter, nepaliMonthParameter);
        }
    
        public virtual int sp_AttendanceLeaveReports(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> officeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var officeIdParameter = officeId.HasValue ?
                new ObjectParameter("officeId", officeId) :
                new ObjectParameter("officeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AttendanceLeaveReports", startDateParameter, endDateParameter, officeIdParameter);
        }
    
        public virtual int sp_AttendanceMonthly(Nullable<int> employeeCode, Nullable<int> fyId, Nullable<int> monthId)
        {
            var employeeCodeParameter = employeeCode.HasValue ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(int));
    
            var fyIdParameter = fyId.HasValue ?
                new ObjectParameter("FyId", fyId) :
                new ObjectParameter("FyId", typeof(int));
    
            var monthIdParameter = monthId.HasValue ?
                new ObjectParameter("MonthId", monthId) :
                new ObjectParameter("MonthId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AttendanceMonthly", employeeCodeParameter, fyIdParameter, monthIdParameter);
        }
    
        public virtual int sp_AttendancePivot(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, string officeid)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var officeidParameter = officeid != null ?
                new ObjectParameter("officeid", officeid) :
                new ObjectParameter("officeid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AttendancePivot", startdateParameter, enddateParameter, officeidParameter);
        }
    
        public virtual ObjectResult<sp_AttendanceRecommender_Result> sp_AttendanceRecommender(Nullable<int> empCode)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AttendanceRecommender_Result>("sp_AttendanceRecommender", empCodeParameter);
        }
    
        public virtual ObjectResult<sp_AttendanceRequestList_Result> sp_AttendanceRequestList(Nullable<int> empcode, Nullable<int> recommenderId, Nullable<int> approverId, Nullable<int> requestedId, Nullable<int> recommendStatus)
        {
            var empcodeParameter = empcode.HasValue ?
                new ObjectParameter("Empcode", empcode) :
                new ObjectParameter("Empcode", typeof(int));
    
            var recommenderIdParameter = recommenderId.HasValue ?
                new ObjectParameter("RecommenderId", recommenderId) :
                new ObjectParameter("RecommenderId", typeof(int));
    
            var approverIdParameter = approverId.HasValue ?
                new ObjectParameter("ApproverId", approverId) :
                new ObjectParameter("ApproverId", typeof(int));
    
            var requestedIdParameter = requestedId.HasValue ?
                new ObjectParameter("RequestedId", requestedId) :
                new ObjectParameter("RequestedId", typeof(int));
    
            var recommendStatusParameter = recommendStatus.HasValue ?
                new ObjectParameter("RecommendStatus", recommendStatus) :
                new ObjectParameter("RecommendStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AttendanceRequestList_Result>("sp_AttendanceRequestList", empcodeParameter, recommenderIdParameter, approverIdParameter, requestedIdParameter, recommendStatusParameter);
        }
    
        public virtual ObjectResult<sp_AttendanceRequestListByParms_Result> sp_AttendanceRequestListByParms(string startDate, string endDate, Nullable<int> officeId, Nullable<int> empCode, Nullable<int> recEmpCode, Nullable<int> approverCode, Nullable<int> recommendstatus, Nullable<int> approvestatus)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var officeIdParameter = officeId.HasValue ?
                new ObjectParameter("OfficeId", officeId) :
                new ObjectParameter("OfficeId", typeof(int));
    
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var recEmpCodeParameter = recEmpCode.HasValue ?
                new ObjectParameter("RecEmpCode", recEmpCode) :
                new ObjectParameter("RecEmpCode", typeof(int));
    
            var approverCodeParameter = approverCode.HasValue ?
                new ObjectParameter("ApproverCode", approverCode) :
                new ObjectParameter("ApproverCode", typeof(int));
    
            var recommendstatusParameter = recommendstatus.HasValue ?
                new ObjectParameter("Recommendstatus", recommendstatus) :
                new ObjectParameter("Recommendstatus", typeof(int));
    
            var approvestatusParameter = approvestatus.HasValue ?
                new ObjectParameter("approvestatus", approvestatus) :
                new ObjectParameter("approvestatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AttendanceRequestListByParms_Result>("sp_AttendanceRequestListByParms", startDateParameter, endDateParameter, officeIdParameter, empCodeParameter, recEmpCodeParameter, approverCodeParameter, recommendstatusParameter, approvestatusParameter);
        }
    
        public virtual int sp_AttendanceRequestReject(Nullable<int> requestID, string approveMessage)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            var approveMessageParameter = approveMessage != null ?
                new ObjectParameter("ApproveMessage", approveMessage) :
                new ObjectParameter("ApproveMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AttendanceRequestReject", requestIDParameter, approveMessageParameter);
        }
    
        public virtual int sp_AttendanceRequestUpdate(Nullable<int> requestID)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AttendanceRequestUpdate", requestIDParameter);
        }
    
        public virtual ObjectResult<string> sp_AttendanceStatusBydateEmpcode(Nullable<System.DateTime> date, Nullable<int> empCode)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_AttendanceStatusBydateEmpcode", dateParameter, empCodeParameter);
        }
    
        public virtual ObjectResult<sp_AttendanceTotalDaysReports_Result> sp_AttendanceTotalDaysReports(Nullable<System.DateTime> startdate, Nullable<System.DateTime> endate, Nullable<int> officeId)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var endateParameter = endate.HasValue ?
                new ObjectParameter("endate", endate) :
                new ObjectParameter("endate", typeof(System.DateTime));
    
            var officeIdParameter = officeId.HasValue ?
                new ObjectParameter("officeId", officeId) :
                new ObjectParameter("officeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AttendanceTotalDaysReports_Result>("sp_AttendanceTotalDaysReports", startdateParameter, endateParameter, officeIdParameter);
        }
    
        public virtual ObjectResult<sp_AttendanceTotalDaysReportsSummary_Result> sp_AttendanceTotalDaysReportsSummary(Nullable<System.DateTime> startdate, Nullable<System.DateTime> endate, Nullable<int> officeId)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var endateParameter = endate.HasValue ?
                new ObjectParameter("endate", endate) :
                new ObjectParameter("endate", typeof(System.DateTime));
    
            var officeIdParameter = officeId.HasValue ?
                new ObjectParameter("officeId", officeId) :
                new ObjectParameter("officeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AttendanceTotalDaysReportsSummary_Result>("sp_AttendanceTotalDaysReportsSummary", startdateParameter, endateParameter, officeIdParameter);
        }
    
        public virtual int sp_ChangeUserpassword(Nullable<int> empCode, string password)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("empCode", empCode) :
                new ObjectParameter("empCode", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChangeUserpassword", empCodeParameter, passwordParameter);
        }
    
        public virtual int sp_CheckAttendanceInsert(Nullable<int> empcode, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var empcodeParameter = empcode.HasValue ?
                new ObjectParameter("Empcode", empcode) :
                new ObjectParameter("Empcode", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("Enddate", enddate) :
                new ObjectParameter("Enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CheckAttendanceInsert", empcodeParameter, startdateParameter, enddateParameter);
        }
    
        public virtual ObjectResult<sp_ControllerList_Result> sp_ControllerList(string controller)
        {
            var controllerParameter = controller != null ?
                new ObjectParameter("controller", controller) :
                new ObjectParameter("controller", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ControllerList_Result>("sp_ControllerList", controllerParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> sp_CountLeaveAppliedDays(Nullable<System.DateTime> sdate, Nullable<System.DateTime> endDate, Nullable<int> leaveId)
        {
            var sdateParameter = sdate.HasValue ?
                new ObjectParameter("Sdate", sdate) :
                new ObjectParameter("Sdate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("LeaveId", leaveId) :
                new ObjectParameter("LeaveId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("sp_CountLeaveAppliedDays", sdateParameter, endDateParameter, leaveIdParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int Sp_DailyAttRecordGenerateIndividual(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> empCode)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DailyAttRecordGenerateIndividual", startDateParameter, endDateParameter, empCodeParameter);
        }
    
        public virtual int sp_deleteAttendance(Nullable<int> requestId)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("requestId", requestId) :
                new ObjectParameter("requestId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deleteAttendance", requestIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_DeleteHoliday(Nullable<int> holidayId)
        {
            var holidayIdParameter = holidayId.HasValue ?
                new ObjectParameter("HolidayId", holidayId) :
                new ObjectParameter("HolidayId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_DeleteHoliday", holidayIdParameter);
        }
    
        public virtual int sp_DeleteOfficelist(Nullable<int> holidayId)
        {
            var holidayIdParameter = holidayId.HasValue ?
                new ObjectParameter("HolidayId", holidayId) :
                new ObjectParameter("HolidayId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteOfficelist", holidayIdParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_EmpAllCodes_Result> sp_EmpAllCodes(Nullable<int> empcode)
        {
            var empcodeParameter = empcode.HasValue ?
                new ObjectParameter("Empcode", empcode) :
                new ObjectParameter("Empcode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmpAllCodes_Result>("sp_EmpAllCodes", empcodeParameter);
        }
    
        public virtual ObjectResult<sp_EmployeeCurrentGradeUpdate_Result> sp_EmployeeCurrentGradeUpdate(Nullable<int> payrollId)
        {
            var payrollIdParameter = payrollId.HasValue ?
                new ObjectParameter("PayrollId", payrollId) :
                new ObjectParameter("PayrollId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmployeeCurrentGradeUpdate_Result>("sp_EmployeeCurrentGradeUpdate", payrollIdParameter);
        }
    
        public virtual int sp_EmployeeDailyAttendanceStatus(Nullable<int> adminEmpCode, string searchDate, Nullable<int> officeID, Nullable<int> degID, Nullable<int> empCode)
        {
            var adminEmpCodeParameter = adminEmpCode.HasValue ?
                new ObjectParameter("AdminEmpCode", adminEmpCode) :
                new ObjectParameter("AdminEmpCode", typeof(int));
    
            var searchDateParameter = searchDate != null ?
                new ObjectParameter("SearchDate", searchDate) :
                new ObjectParameter("SearchDate", typeof(string));
    
            var officeIDParameter = officeID.HasValue ?
                new ObjectParameter("OfficeID", officeID) :
                new ObjectParameter("OfficeID", typeof(int));
    
            var degIDParameter = degID.HasValue ?
                new ObjectParameter("DegID", degID) :
                new ObjectParameter("DegID", typeof(int));
    
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EmployeeDailyAttendanceStatus", adminEmpCodeParameter, searchDateParameter, officeIDParameter, degIDParameter, empCodeParameter);
        }
    
        public virtual ObjectResult<sp_EmployeeDetails_Result> sp_EmployeeDetails(Nullable<int> empCode)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmployeeDetails_Result>("sp_EmployeeDetails", empCodeParameter);
        }
    
        public virtual ObjectResult<sp_EmployeeDetailsById_Result> sp_EmployeeDetailsById(Nullable<int> empCode)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmployeeDetailsById_Result>("sp_EmployeeDetailsById", empCodeParameter);
        }
    
        public virtual ObjectResult<sp_EmployeeDetailsWithJobHistories_Result> sp_EmployeeDetailsWithJobHistories(Nullable<int> empCode)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmployeeDetailsWithJobHistories_Result>("sp_EmployeeDetailsWithJobHistories", empCodeParameter);
        }
    
        public virtual int sp_EmployeeEdit(Nullable<int> empCode, string customerId, string empName, Nullable<System.DateTime> empJoinDate, string empPhoto, string empGender, Nullable<bool> empStatus, string empMaritalStatus, Nullable<bool> empIncapacitated, Nullable<bool> empDeptHead, Nullable<bool> empOfficeHead, Nullable<bool> empAttendanceIgnore, Nullable<bool> empPayroll, string empEmail, string empPassword, Nullable<int> empBgId, Nullable<int> empTypeId, Nullable<int> empShiftId, Nullable<int> empCurrentGradeNumber, Nullable<int> empTaxRuleid, string empAppointmentAdvNumber, Nullable<System.DateTime> empDOB, Nullable<System.DateTime> empMarriageAnniversary, Nullable<int> empEthnicity, Nullable<int> empReligionId, string empBloodGroup, string empPanNumber, string empCitNumber, string empPFNumber, string empDrivingLicenseNumber, string empPassportNumber, Nullable<System.DateTime> empAgeRetireDate, string empHuliya, string empOfficeEmail, string empOfficePhone, string empHomePhone, string empPAddress, string empTAddress, string empMobileNumber, string empEmergencyContactName, string empEmergencyContactRelation, string empEmergencyContact, string empEmergencyAddress, string empFacebook, string empTwitter, string empLinkedIn, Nullable<int> empHiringMethodId, string empCitizenshipNumber, string empCitizenshipIssueDate, Nullable<int> empCitizenshipDistrictId, string empNomineeName, string empNomineeAddress, string empNomineePhoto, Nullable<System.DateTime> empNomineeDOB, string empNomineeCitizenshipNumber, Nullable<System.DateTime> empNomineeCitizenshipIssueDate, Nullable<int> empNomineeCitizenshipIssueDistrictId, string empNomineeRelation, string nationality, string spouseName, string employeeHeight, Nullable<System.DateTime> pfEffectiveDate, Nullable<System.DateTime> gratuityEffectiveDate, string employeeBankAccountNumber)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var empJoinDateParameter = empJoinDate.HasValue ?
                new ObjectParameter("EmpJoinDate", empJoinDate) :
                new ObjectParameter("EmpJoinDate", typeof(System.DateTime));
    
            var empPhotoParameter = empPhoto != null ?
                new ObjectParameter("EmpPhoto", empPhoto) :
                new ObjectParameter("EmpPhoto", typeof(string));
    
            var empGenderParameter = empGender != null ?
                new ObjectParameter("EmpGender", empGender) :
                new ObjectParameter("EmpGender", typeof(string));
    
            var empStatusParameter = empStatus.HasValue ?
                new ObjectParameter("EmpStatus", empStatus) :
                new ObjectParameter("EmpStatus", typeof(bool));
    
            var empMaritalStatusParameter = empMaritalStatus != null ?
                new ObjectParameter("EmpMaritalStatus", empMaritalStatus) :
                new ObjectParameter("EmpMaritalStatus", typeof(string));
    
            var empIncapacitatedParameter = empIncapacitated.HasValue ?
                new ObjectParameter("EmpIncapacitated", empIncapacitated) :
                new ObjectParameter("EmpIncapacitated", typeof(bool));
    
            var empDeptHeadParameter = empDeptHead.HasValue ?
                new ObjectParameter("EmpDeptHead", empDeptHead) :
                new ObjectParameter("EmpDeptHead", typeof(bool));
    
            var empOfficeHeadParameter = empOfficeHead.HasValue ?
                new ObjectParameter("EmpOfficeHead", empOfficeHead) :
                new ObjectParameter("EmpOfficeHead", typeof(bool));
    
            var empAttendanceIgnoreParameter = empAttendanceIgnore.HasValue ?
                new ObjectParameter("EmpAttendanceIgnore", empAttendanceIgnore) :
                new ObjectParameter("EmpAttendanceIgnore", typeof(bool));
    
            var empPayrollParameter = empPayroll.HasValue ?
                new ObjectParameter("EmpPayroll", empPayroll) :
                new ObjectParameter("EmpPayroll", typeof(bool));
    
            var empEmailParameter = empEmail != null ?
                new ObjectParameter("EmpEmail", empEmail) :
                new ObjectParameter("EmpEmail", typeof(string));
    
            var empPasswordParameter = empPassword != null ?
                new ObjectParameter("EmpPassword", empPassword) :
                new ObjectParameter("EmpPassword", typeof(string));
    
            var empBgIdParameter = empBgId.HasValue ?
                new ObjectParameter("EmpBgId", empBgId) :
                new ObjectParameter("EmpBgId", typeof(int));
    
            var empTypeIdParameter = empTypeId.HasValue ?
                new ObjectParameter("EmpTypeId", empTypeId) :
                new ObjectParameter("EmpTypeId", typeof(int));
    
            var empShiftIdParameter = empShiftId.HasValue ?
                new ObjectParameter("EmpShiftId", empShiftId) :
                new ObjectParameter("EmpShiftId", typeof(int));
    
            var empCurrentGradeNumberParameter = empCurrentGradeNumber.HasValue ?
                new ObjectParameter("EmpCurrentGradeNumber", empCurrentGradeNumber) :
                new ObjectParameter("EmpCurrentGradeNumber", typeof(int));
    
            var empTaxRuleidParameter = empTaxRuleid.HasValue ?
                new ObjectParameter("EmpTaxRuleid", empTaxRuleid) :
                new ObjectParameter("EmpTaxRuleid", typeof(int));
    
            var empAppointmentAdvNumberParameter = empAppointmentAdvNumber != null ?
                new ObjectParameter("EmpAppointmentAdvNumber", empAppointmentAdvNumber) :
                new ObjectParameter("EmpAppointmentAdvNumber", typeof(string));
    
            var empDOBParameter = empDOB.HasValue ?
                new ObjectParameter("EmpDOB", empDOB) :
                new ObjectParameter("EmpDOB", typeof(System.DateTime));
    
            var empMarriageAnniversaryParameter = empMarriageAnniversary.HasValue ?
                new ObjectParameter("EmpMarriageAnniversary", empMarriageAnniversary) :
                new ObjectParameter("EmpMarriageAnniversary", typeof(System.DateTime));
    
            var empEthnicityParameter = empEthnicity.HasValue ?
                new ObjectParameter("EmpEthnicity", empEthnicity) :
                new ObjectParameter("EmpEthnicity", typeof(int));
    
            var empReligionIdParameter = empReligionId.HasValue ?
                new ObjectParameter("EmpReligionId", empReligionId) :
                new ObjectParameter("EmpReligionId", typeof(int));
    
            var empBloodGroupParameter = empBloodGroup != null ?
                new ObjectParameter("EmpBloodGroup", empBloodGroup) :
                new ObjectParameter("EmpBloodGroup", typeof(string));
    
            var empPanNumberParameter = empPanNumber != null ?
                new ObjectParameter("EmpPanNumber", empPanNumber) :
                new ObjectParameter("EmpPanNumber", typeof(string));
    
            var empCitNumberParameter = empCitNumber != null ?
                new ObjectParameter("EmpCitNumber", empCitNumber) :
                new ObjectParameter("EmpCitNumber", typeof(string));
    
            var empPFNumberParameter = empPFNumber != null ?
                new ObjectParameter("EmpPFNumber", empPFNumber) :
                new ObjectParameter("EmpPFNumber", typeof(string));
    
            var empDrivingLicenseNumberParameter = empDrivingLicenseNumber != null ?
                new ObjectParameter("EmpDrivingLicenseNumber", empDrivingLicenseNumber) :
                new ObjectParameter("EmpDrivingLicenseNumber", typeof(string));
    
            var empPassportNumberParameter = empPassportNumber != null ?
                new ObjectParameter("EmpPassportNumber", empPassportNumber) :
                new ObjectParameter("EmpPassportNumber", typeof(string));
    
            var empAgeRetireDateParameter = empAgeRetireDate.HasValue ?
                new ObjectParameter("EmpAgeRetireDate", empAgeRetireDate) :
                new ObjectParameter("EmpAgeRetireDate", typeof(System.DateTime));
    
            var empHuliyaParameter = empHuliya != null ?
                new ObjectParameter("EmpHuliya", empHuliya) :
                new ObjectParameter("EmpHuliya", typeof(string));
    
            var empOfficeEmailParameter = empOfficeEmail != null ?
                new ObjectParameter("EmpOfficeEmail", empOfficeEmail) :
                new ObjectParameter("EmpOfficeEmail", typeof(string));
    
            var empOfficePhoneParameter = empOfficePhone != null ?
                new ObjectParameter("EmpOfficePhone", empOfficePhone) :
                new ObjectParameter("EmpOfficePhone", typeof(string));
    
            var empHomePhoneParameter = empHomePhone != null ?
                new ObjectParameter("EmpHomePhone", empHomePhone) :
                new ObjectParameter("EmpHomePhone", typeof(string));
    
            var empPAddressParameter = empPAddress != null ?
                new ObjectParameter("EmpPAddress", empPAddress) :
                new ObjectParameter("EmpPAddress", typeof(string));
    
            var empTAddressParameter = empTAddress != null ?
                new ObjectParameter("EmpTAddress", empTAddress) :
                new ObjectParameter("EmpTAddress", typeof(string));
    
            var empMobileNumberParameter = empMobileNumber != null ?
                new ObjectParameter("EmpMobileNumber", empMobileNumber) :
                new ObjectParameter("EmpMobileNumber", typeof(string));
    
            var empEmergencyContactNameParameter = empEmergencyContactName != null ?
                new ObjectParameter("EmpEmergencyContactName", empEmergencyContactName) :
                new ObjectParameter("EmpEmergencyContactName", typeof(string));
    
            var empEmergencyContactRelationParameter = empEmergencyContactRelation != null ?
                new ObjectParameter("EmpEmergencyContactRelation", empEmergencyContactRelation) :
                new ObjectParameter("EmpEmergencyContactRelation", typeof(string));
    
            var empEmergencyContactParameter = empEmergencyContact != null ?
                new ObjectParameter("EmpEmergencyContact", empEmergencyContact) :
                new ObjectParameter("EmpEmergencyContact", typeof(string));
    
            var empEmergencyAddressParameter = empEmergencyAddress != null ?
                new ObjectParameter("EmpEmergencyAddress", empEmergencyAddress) :
                new ObjectParameter("EmpEmergencyAddress", typeof(string));
    
            var empFacebookParameter = empFacebook != null ?
                new ObjectParameter("EmpFacebook", empFacebook) :
                new ObjectParameter("EmpFacebook", typeof(string));
    
            var empTwitterParameter = empTwitter != null ?
                new ObjectParameter("EmpTwitter", empTwitter) :
                new ObjectParameter("EmpTwitter", typeof(string));
    
            var empLinkedInParameter = empLinkedIn != null ?
                new ObjectParameter("EmpLinkedIn", empLinkedIn) :
                new ObjectParameter("EmpLinkedIn", typeof(string));
    
            var empHiringMethodIdParameter = empHiringMethodId.HasValue ?
                new ObjectParameter("EmpHiringMethodId", empHiringMethodId) :
                new ObjectParameter("EmpHiringMethodId", typeof(int));
    
            var empCitizenshipNumberParameter = empCitizenshipNumber != null ?
                new ObjectParameter("EmpCitizenshipNumber", empCitizenshipNumber) :
                new ObjectParameter("EmpCitizenshipNumber", typeof(string));
    
            var empCitizenshipIssueDateParameter = empCitizenshipIssueDate != null ?
                new ObjectParameter("EmpCitizenshipIssueDate", empCitizenshipIssueDate) :
                new ObjectParameter("EmpCitizenshipIssueDate", typeof(string));
    
            var empCitizenshipDistrictIdParameter = empCitizenshipDistrictId.HasValue ?
                new ObjectParameter("EmpCitizenshipDistrictId", empCitizenshipDistrictId) :
                new ObjectParameter("EmpCitizenshipDistrictId", typeof(int));
    
            var empNomineeNameParameter = empNomineeName != null ?
                new ObjectParameter("EmpNomineeName", empNomineeName) :
                new ObjectParameter("EmpNomineeName", typeof(string));
    
            var empNomineeAddressParameter = empNomineeAddress != null ?
                new ObjectParameter("EmpNomineeAddress", empNomineeAddress) :
                new ObjectParameter("EmpNomineeAddress", typeof(string));
    
            var empNomineePhotoParameter = empNomineePhoto != null ?
                new ObjectParameter("EmpNomineePhoto", empNomineePhoto) :
                new ObjectParameter("EmpNomineePhoto", typeof(string));
    
            var empNomineeDOBParameter = empNomineeDOB.HasValue ?
                new ObjectParameter("EmpNomineeDOB", empNomineeDOB) :
                new ObjectParameter("EmpNomineeDOB", typeof(System.DateTime));
    
            var empNomineeCitizenshipNumberParameter = empNomineeCitizenshipNumber != null ?
                new ObjectParameter("EmpNomineeCitizenshipNumber", empNomineeCitizenshipNumber) :
                new ObjectParameter("EmpNomineeCitizenshipNumber", typeof(string));
    
            var empNomineeCitizenshipIssueDateParameter = empNomineeCitizenshipIssueDate.HasValue ?
                new ObjectParameter("EmpNomineeCitizenshipIssueDate", empNomineeCitizenshipIssueDate) :
                new ObjectParameter("EmpNomineeCitizenshipIssueDate", typeof(System.DateTime));
    
            var empNomineeCitizenshipIssueDistrictIdParameter = empNomineeCitizenshipIssueDistrictId.HasValue ?
                new ObjectParameter("EmpNomineeCitizenshipIssueDistrictId", empNomineeCitizenshipIssueDistrictId) :
                new ObjectParameter("EmpNomineeCitizenshipIssueDistrictId", typeof(int));
    
            var empNomineeRelationParameter = empNomineeRelation != null ?
                new ObjectParameter("EmpNomineeRelation", empNomineeRelation) :
                new ObjectParameter("EmpNomineeRelation", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var spouseNameParameter = spouseName != null ?
                new ObjectParameter("SpouseName", spouseName) :
                new ObjectParameter("SpouseName", typeof(string));
    
            var employeeHeightParameter = employeeHeight != null ?
                new ObjectParameter("EmployeeHeight", employeeHeight) :
                new ObjectParameter("EmployeeHeight", typeof(string));
    
            var pfEffectiveDateParameter = pfEffectiveDate.HasValue ?
                new ObjectParameter("PfEffectiveDate", pfEffectiveDate) :
                new ObjectParameter("PfEffectiveDate", typeof(System.DateTime));
    
            var gratuityEffectiveDateParameter = gratuityEffectiveDate.HasValue ?
                new ObjectParameter("GratuityEffectiveDate", gratuityEffectiveDate) :
                new ObjectParameter("GratuityEffectiveDate", typeof(System.DateTime));
    
            var employeeBankAccountNumberParameter = employeeBankAccountNumber != null ?
                new ObjectParameter("EmployeeBankAccountNumber", employeeBankAccountNumber) :
                new ObjectParameter("EmployeeBankAccountNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EmployeeEdit", empCodeParameter, customerIdParameter, empNameParameter, empJoinDateParameter, empPhotoParameter, empGenderParameter, empStatusParameter, empMaritalStatusParameter, empIncapacitatedParameter, empDeptHeadParameter, empOfficeHeadParameter, empAttendanceIgnoreParameter, empPayrollParameter, empEmailParameter, empPasswordParameter, empBgIdParameter, empTypeIdParameter, empShiftIdParameter, empCurrentGradeNumberParameter, empTaxRuleidParameter, empAppointmentAdvNumberParameter, empDOBParameter, empMarriageAnniversaryParameter, empEthnicityParameter, empReligionIdParameter, empBloodGroupParameter, empPanNumberParameter, empCitNumberParameter, empPFNumberParameter, empDrivingLicenseNumberParameter, empPassportNumberParameter, empAgeRetireDateParameter, empHuliyaParameter, empOfficeEmailParameter, empOfficePhoneParameter, empHomePhoneParameter, empPAddressParameter, empTAddressParameter, empMobileNumberParameter, empEmergencyContactNameParameter, empEmergencyContactRelationParameter, empEmergencyContactParameter, empEmergencyAddressParameter, empFacebookParameter, empTwitterParameter, empLinkedInParameter, empHiringMethodIdParameter, empCitizenshipNumberParameter, empCitizenshipIssueDateParameter, empCitizenshipDistrictIdParameter, empNomineeNameParameter, empNomineeAddressParameter, empNomineePhotoParameter, empNomineeDOBParameter, empNomineeCitizenshipNumberParameter, empNomineeCitizenshipIssueDateParameter, empNomineeCitizenshipIssueDistrictIdParameter, empNomineeRelationParameter, nationalityParameter, spouseNameParameter, employeeHeightParameter, pfEffectiveDateParameter, gratuityEffectiveDateParameter, employeeBankAccountNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_EmployeeLeaveEarnedMonthly(Nullable<int> empcode, Nullable<int> nepaliYear, Nullable<int> monthcode, Nullable<int> leaveTypeId)
        {
            var empcodeParameter = empcode.HasValue ?
                new ObjectParameter("Empcode", empcode) :
                new ObjectParameter("Empcode", typeof(int));
    
            var nepaliYearParameter = nepaliYear.HasValue ?
                new ObjectParameter("nepaliYear", nepaliYear) :
                new ObjectParameter("nepaliYear", typeof(int));
    
            var monthcodeParameter = monthcode.HasValue ?
                new ObjectParameter("Monthcode", monthcode) :
                new ObjectParameter("Monthcode", typeof(int));
    
            var leaveTypeIdParameter = leaveTypeId.HasValue ?
                new ObjectParameter("leaveTypeId", leaveTypeId) :
                new ObjectParameter("leaveTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_EmployeeLeaveEarnedMonthly", empcodeParameter, nepaliYearParameter, monthcodeParameter, leaveTypeIdParameter);
        }
    
        public virtual int sp_EmployeeListByEmpCode(Nullable<int> empCode)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EmployeeListByEmpCode", empCodeParameter);
        }
    
        public virtual int sp_EmployeeListByRoleId(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EmployeeListByRoleId", roleIdParameter);
        }
    
        public virtual int sp_EmployeeLists(Nullable<int> empCode)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EmployeeLists", empCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_EmployeeMonthlyTakenLeave(Nullable<int> empcode, Nullable<int> nepaliYear, Nullable<int> monthcode, Nullable<int> leaveTypeId)
        {
            var empcodeParameter = empcode.HasValue ?
                new ObjectParameter("Empcode", empcode) :
                new ObjectParameter("Empcode", typeof(int));
    
            var nepaliYearParameter = nepaliYear.HasValue ?
                new ObjectParameter("nepaliYear", nepaliYear) :
                new ObjectParameter("nepaliYear", typeof(int));
    
            var monthcodeParameter = monthcode.HasValue ?
                new ObjectParameter("Monthcode", monthcode) :
                new ObjectParameter("Monthcode", typeof(int));
    
            var leaveTypeIdParameter = leaveTypeId.HasValue ?
                new ObjectParameter("leaveTypeId", leaveTypeId) :
                new ObjectParameter("leaveTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_EmployeeMonthlyTakenLeave", empcodeParameter, nepaliYearParameter, monthcodeParameter, leaveTypeIdParameter);
        }
    
        public virtual ObjectResult<sp_EmployeeTransferUpdate_Result> sp_EmployeeTransferUpdate(Nullable<int> empOfficeId, Nullable<int> empLevelId, Nullable<int> empRankId, Nullable<int> empShiftId, Nullable<int> empDeptId, Nullable<int> empSectionId, Nullable<int> empDesgId, Nullable<int> empTypeId, Nullable<int> empBgId, Nullable<int> empJobTypeId, Nullable<int> empCode, string remoteType)
        {
            var empOfficeIdParameter = empOfficeId.HasValue ?
                new ObjectParameter("EmpOfficeId", empOfficeId) :
                new ObjectParameter("EmpOfficeId", typeof(int));
    
            var empLevelIdParameter = empLevelId.HasValue ?
                new ObjectParameter("EmpLevelId", empLevelId) :
                new ObjectParameter("EmpLevelId", typeof(int));
    
            var empRankIdParameter = empRankId.HasValue ?
                new ObjectParameter("EmpRankId", empRankId) :
                new ObjectParameter("EmpRankId", typeof(int));
    
            var empShiftIdParameter = empShiftId.HasValue ?
                new ObjectParameter("EmpShiftId", empShiftId) :
                new ObjectParameter("EmpShiftId", typeof(int));
    
            var empDeptIdParameter = empDeptId.HasValue ?
                new ObjectParameter("EmpDeptId", empDeptId) :
                new ObjectParameter("EmpDeptId", typeof(int));
    
            var empSectionIdParameter = empSectionId.HasValue ?
                new ObjectParameter("EmpSectionId", empSectionId) :
                new ObjectParameter("EmpSectionId", typeof(int));
    
            var empDesgIdParameter = empDesgId.HasValue ?
                new ObjectParameter("EmpDesgId", empDesgId) :
                new ObjectParameter("EmpDesgId", typeof(int));
    
            var empTypeIdParameter = empTypeId.HasValue ?
                new ObjectParameter("EmpTypeId", empTypeId) :
                new ObjectParameter("EmpTypeId", typeof(int));
    
            var empBgIdParameter = empBgId.HasValue ?
                new ObjectParameter("EmpBgId", empBgId) :
                new ObjectParameter("EmpBgId", typeof(int));
    
            var empJobTypeIdParameter = empJobTypeId.HasValue ?
                new ObjectParameter("EmpJobTypeId", empJobTypeId) :
                new ObjectParameter("EmpJobTypeId", typeof(int));
    
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var remoteTypeParameter = remoteType != null ?
                new ObjectParameter("RemoteType", remoteType) :
                new ObjectParameter("RemoteType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmployeeTransferUpdate_Result>("sp_EmployeeTransferUpdate", empOfficeIdParameter, empLevelIdParameter, empRankIdParameter, empShiftIdParameter, empDeptIdParameter, empSectionIdParameter, empDesgIdParameter, empTypeIdParameter, empBgIdParameter, empJobTypeIdParameter, empCodeParameter, remoteTypeParameter);
        }
    
        public virtual ObjectResult<sp_FiscalAdd_Result> sp_FiscalAdd(string name, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string startDateNep, string endDateNep, Nullable<bool> isActive)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var startDateNepParameter = startDateNep != null ?
                new ObjectParameter("StartDateNep", startDateNep) :
                new ObjectParameter("StartDateNep", typeof(string));
    
            var endDateNepParameter = endDateNep != null ?
                new ObjectParameter("EndDateNep", endDateNep) :
                new ObjectParameter("EndDateNep", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FiscalAdd_Result>("sp_FiscalAdd", nameParameter, startDateParameter, endDateParameter, startDateNepParameter, endDateNepParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_FiscalEdit_Result> sp_FiscalEdit(Nullable<int> id, string name, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string startDateNep, string endDateNep, Nullable<bool> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var startDateNepParameter = startDateNep != null ?
                new ObjectParameter("StartDateNep", startDateNep) :
                new ObjectParameter("StartDateNep", typeof(string));
    
            var endDateNepParameter = endDateNep != null ?
                new ObjectParameter("EndDateNep", endDateNep) :
                new ObjectParameter("EndDateNep", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FiscalEdit_Result>("sp_FiscalEdit", idParameter, nameParameter, startDateParameter, endDateParameter, startDateNepParameter, endDateNepParameter, isActiveParameter);
        }
    
        public virtual int sp_GeneratePayroll(Nullable<int> fyId, Nullable<int> monthDescriptId, Nullable<int> creatorId, Nullable<int> branchId, string details, Nullable<bool> deleteFlag)
        {
            var fyIdParameter = fyId.HasValue ?
                new ObjectParameter("FyId", fyId) :
                new ObjectParameter("FyId", typeof(int));
    
            var monthDescriptIdParameter = monthDescriptId.HasValue ?
                new ObjectParameter("MonthDescriptId", monthDescriptId) :
                new ObjectParameter("MonthDescriptId", typeof(int));
    
            var creatorIdParameter = creatorId.HasValue ?
                new ObjectParameter("CreatorId", creatorId) :
                new ObjectParameter("CreatorId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var deleteFlagParameter = deleteFlag.HasValue ?
                new ObjectParameter("DeleteFlag", deleteFlag) :
                new ObjectParameter("DeleteFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GeneratePayroll", fyIdParameter, monthDescriptIdParameter, creatorIdParameter, branchIdParameter, detailsParameter, deleteFlagParameter);
        }
    
        public virtual int sp_GeneratePayrollByShree(Nullable<int> fyId, Nullable<int> monthDescriptId, Nullable<int> creatorId, Nullable<int> branchId, string details, Nullable<bool> deleteFlag)
        {
            var fyIdParameter = fyId.HasValue ?
                new ObjectParameter("FyId", fyId) :
                new ObjectParameter("FyId", typeof(int));
    
            var monthDescriptIdParameter = monthDescriptId.HasValue ?
                new ObjectParameter("MonthDescriptId", monthDescriptId) :
                new ObjectParameter("MonthDescriptId", typeof(int));
    
            var creatorIdParameter = creatorId.HasValue ?
                new ObjectParameter("CreatorId", creatorId) :
                new ObjectParameter("CreatorId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var deleteFlagParameter = deleteFlag.HasValue ?
                new ObjectParameter("DeleteFlag", deleteFlag) :
                new ObjectParameter("DeleteFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GeneratePayrollByShree", fyIdParameter, monthDescriptIdParameter, creatorIdParameter, branchIdParameter, detailsParameter, deleteFlagParameter);
        }
    
        public virtual ObjectResult<sp_GeneratePayrollNewVersion_Result> sp_GeneratePayrollNewVersion(Nullable<int> fyId, Nullable<int> monthDescriptId, Nullable<int> creatorId, Nullable<int> branchId, string details, Nullable<bool> deleteFlag)
        {
            var fyIdParameter = fyId.HasValue ?
                new ObjectParameter("FyId", fyId) :
                new ObjectParameter("FyId", typeof(int));
    
            var monthDescriptIdParameter = monthDescriptId.HasValue ?
                new ObjectParameter("MonthDescriptId", monthDescriptId) :
                new ObjectParameter("MonthDescriptId", typeof(int));
    
            var creatorIdParameter = creatorId.HasValue ?
                new ObjectParameter("CreatorId", creatorId) :
                new ObjectParameter("CreatorId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var deleteFlagParameter = deleteFlag.HasValue ?
                new ObjectParameter("DeleteFlag", deleteFlag) :
                new ObjectParameter("DeleteFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GeneratePayrollNewVersion_Result>("sp_GeneratePayrollNewVersion", fyIdParameter, monthDescriptIdParameter, creatorIdParameter, branchIdParameter, detailsParameter, deleteFlagParameter);
        }
    
        public virtual ObjectResult<sp_GetActiveYear_Result> sp_GetActiveYear()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetActiveYear_Result>("sp_GetActiveYear");
        }
    
        public virtual ObjectResult<sp_GetChildMenuList_Result> sp_GetChildMenuList(Nullable<int> parentId, Nullable<int> roleId)
        {
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetChildMenuList_Result>("sp_GetChildMenuList", parentIdParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<sp_GetDistrictsList_Result> sp_GetDistrictsList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDistrictsList_Result>("sp_GetDistrictsList");
        }
    
        public virtual ObjectResult<string> sp_GetEmployeeAttendanceStatus(Nullable<System.DateTime> attdate, Nullable<int> empcode)
        {
            var attdateParameter = attdate.HasValue ?
                new ObjectParameter("Attdate", attdate) :
                new ObjectParameter("Attdate", typeof(System.DateTime));
    
            var empcodeParameter = empcode.HasValue ?
                new ObjectParameter("Empcode", empcode) :
                new ObjectParameter("Empcode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetEmployeeAttendanceStatus", attdateParameter, empcodeParameter);
        }
    
        public virtual ObjectResult<sp_getEmployeelistByOfficeId_Result> sp_getEmployeelistByOfficeId(Nullable<int> officeid)
        {
            var officeidParameter = officeid.HasValue ?
                new ObjectParameter("officeid", officeid) :
                new ObjectParameter("officeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getEmployeelistByOfficeId_Result>("sp_getEmployeelistByOfficeId", officeidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_GetMainParentId(string controllerName)
        {
            var controllerNameParameter = controllerName != null ?
                new ObjectParameter("controllerName", controllerName) :
                new ObjectParameter("controllerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_GetMainParentId", controllerNameParameter);
        }
    
        public virtual ObjectResult<sp_GetPayrollSalaryTable_Result> sp_GetPayrollSalaryTable(Nullable<int> fiscalYearId, Nullable<int> officeId)
        {
            var fiscalYearIdParameter = fiscalYearId.HasValue ?
                new ObjectParameter("fiscalYearId", fiscalYearId) :
                new ObjectParameter("fiscalYearId", typeof(int));
    
            var officeIdParameter = officeId.HasValue ?
                new ObjectParameter("officeId", officeId) :
                new ObjectParameter("officeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPayrollSalaryTable_Result>("sp_GetPayrollSalaryTable", fiscalYearIdParameter, officeIdParameter);
        }
    
        public virtual ObjectResult<sp_GetStartAndEndDate_Result> sp_GetStartAndEndDate(Nullable<int> year, Nullable<int> month)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetStartAndEndDate_Result>("sp_GetStartAndEndDate", yearParameter, monthParameter);
        }
    
        public virtual ObjectResult<sp_GetUnassignedLeave_Result> sp_GetUnassignedLeave(Nullable<int> empcode, Nullable<int> leaveRuleId, Nullable<int> yearId)
        {
            var empcodeParameter = empcode.HasValue ?
                new ObjectParameter("Empcode", empcode) :
                new ObjectParameter("Empcode", typeof(int));
    
            var leaveRuleIdParameter = leaveRuleId.HasValue ?
                new ObjectParameter("LeaveRuleId", leaveRuleId) :
                new ObjectParameter("LeaveRuleId", typeof(int));
    
            var yearIdParameter = yearId.HasValue ?
                new ObjectParameter("yearId", yearId) :
                new ObjectParameter("yearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUnassignedLeave_Result>("sp_GetUnassignedLeave", empcodeParameter, leaveRuleIdParameter, yearIdParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_HolidayAssignedOficeList_Result> sp_HolidayAssignedOficeList(Nullable<int> hilidayId)
        {
            var hilidayIdParameter = hilidayId.HasValue ?
                new ObjectParameter("HilidayId", hilidayId) :
                new ObjectParameter("HilidayId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_HolidayAssignedOficeList_Result>("sp_HolidayAssignedOficeList", hilidayIdParameter);
        }
    
        public virtual ObjectResult<sp_HolidayList_Result> sp_HolidayList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_HolidayList_Result>("sp_HolidayList");
        }
    
        public virtual int sp_InsertHolidayAssignedOffice(Nullable<int> officeId, Nullable<int> holidayId)
        {
            var officeIdParameter = officeId.HasValue ?
                new ObjectParameter("OfficeId", officeId) :
                new ObjectParameter("OfficeId", typeof(int));
    
            var holidayIdParameter = holidayId.HasValue ?
                new ObjectParameter("HolidayId", holidayId) :
                new ObjectParameter("HolidayId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertHolidayAssignedOffice", officeIdParameter, holidayIdParameter);
        }
    
        public virtual int sp_InsertIntoApprover(Nullable<int> empcode, Nullable<int> officeId)
        {
            var empcodeParameter = empcode.HasValue ?
                new ObjectParameter("Empcode", empcode) :
                new ObjectParameter("Empcode", typeof(int));
    
            var officeIdParameter = officeId.HasValue ?
                new ObjectParameter("OfficeId", officeId) :
                new ObjectParameter("OfficeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertIntoApprover", empcodeParameter, officeIdParameter);
        }
    
        public virtual int sp_Insertkaajattendance(Nullable<int> empcode, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, string type)
        {
            var empcodeParameter = empcode.HasValue ?
                new ObjectParameter("Empcode", empcode) :
                new ObjectParameter("Empcode", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insertkaajattendance", empcodeParameter, startdateParameter, enddateParameter, typeParameter);
        }
    
        public virtual int sp_InsertLeaveRuleDetails(Nullable<int> detailID, Nullable<int> leaveRuleId, Nullable<int> leaveTypeId, Nullable<decimal> leaveDays)
        {
            var detailIDParameter = detailID.HasValue ?
                new ObjectParameter("DetailID", detailID) :
                new ObjectParameter("DetailID", typeof(int));
    
            var leaveRuleIdParameter = leaveRuleId.HasValue ?
                new ObjectParameter("LeaveRuleId", leaveRuleId) :
                new ObjectParameter("LeaveRuleId", typeof(int));
    
            var leaveTypeIdParameter = leaveTypeId.HasValue ?
                new ObjectParameter("LeaveTypeId", leaveTypeId) :
                new ObjectParameter("LeaveTypeId", typeof(int));
    
            var leaveDaysParameter = leaveDays.HasValue ?
                new ObjectParameter("LeaveDays", leaveDays) :
                new ObjectParameter("LeaveDays", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertLeaveRuleDetails", detailIDParameter, leaveRuleIdParameter, leaveTypeIdParameter, leaveDaysParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_IsProfileViewable(Nullable<int> adminEmpCode, Nullable<int> employeeProfileEmpCode)
        {
            var adminEmpCodeParameter = adminEmpCode.HasValue ?
                new ObjectParameter("AdminEmpCode", adminEmpCode) :
                new ObjectParameter("AdminEmpCode", typeof(int));
    
            var employeeProfileEmpCodeParameter = employeeProfileEmpCode.HasValue ?
                new ObjectParameter("EmployeeProfileEmpCode", employeeProfileEmpCode) :
                new ObjectParameter("EmployeeProfileEmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_IsProfileViewable", adminEmpCodeParameter, employeeProfileEmpCodeParameter);
        }
    
        public virtual ObjectResult<sp_LeaveApplicationApproveDetailById_Result> sp_LeaveApplicationApproveDetailById(Nullable<int> empCode, Nullable<int> leaveId)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("LeaveId", leaveId) :
                new ObjectParameter("LeaveId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeaveApplicationApproveDetailById_Result>("sp_LeaveApplicationApproveDetailById", empCodeParameter, leaveIdParameter);
        }
    
        public virtual int sp_LeaveApplicationApproveStatusChange(Nullable<int> leaveIdy, Nullable<int> status, string message)
        {
            var leaveIdyParameter = leaveIdy.HasValue ?
                new ObjectParameter("LeaveIdy", leaveIdy) :
                new ObjectParameter("LeaveIdy", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LeaveApplicationApproveStatusChange", leaveIdyParameter, statusParameter, messageParameter);
        }
    
        public virtual int SP_LeaveApplicationAttendanceRecord(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> empCode, Nullable<int> leaveId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("LeaveId", leaveId) :
                new ObjectParameter("LeaveId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_LeaveApplicationAttendanceRecord", fromDateParameter, toDateParameter, empCodeParameter, leaveIdParameter);
        }
    
        public virtual int sp_LeaveApplicationDelete(Nullable<int> empCode, Nullable<int> leaveIdy)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var leaveIdyParameter = leaveIdy.HasValue ?
                new ObjectParameter("LeaveIdy", leaveIdy) :
                new ObjectParameter("LeaveIdy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LeaveApplicationDelete", empCodeParameter, leaveIdyParameter);
        }
    
        public virtual ObjectResult<sp_LeaveApplicationDetail_Result> sp_LeaveApplicationDetail(Nullable<int> empCode, Nullable<int> leaveId)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("LeaveId", leaveId) :
                new ObjectParameter("LeaveId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeaveApplicationDetail_Result>("sp_LeaveApplicationDetail", empCodeParameter, leaveIdParameter);
        }
    
        public virtual ObjectResult<sp_LeaveApplicationDetailadmin_Result> sp_LeaveApplicationDetailadmin(Nullable<int> leaveId)
        {
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("LeaveId", leaveId) :
                new ObjectParameter("LeaveId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeaveApplicationDetailadmin_Result>("sp_LeaveApplicationDetailadmin", leaveIdParameter);
        }
    
        public virtual ObjectResult<sp_LeaveApplicationDetailById_Result> sp_LeaveApplicationDetailById(Nullable<int> empCode, Nullable<int> leaveId)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("LeaveId", leaveId) :
                new ObjectParameter("LeaveId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeaveApplicationDetailById_Result>("sp_LeaveApplicationDetailById", empCodeParameter, leaveIdParameter);
        }
    
        public virtual ObjectResult<sp_LeaveApplicationEmployeeBalance_Result> sp_LeaveApplicationEmployeeBalance(Nullable<int> empCode, Nullable<int> leaveYearId, Nullable<int> leaveTypeId)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("empCode", empCode) :
                new ObjectParameter("empCode", typeof(int));
    
            var leaveYearIdParameter = leaveYearId.HasValue ?
                new ObjectParameter("leaveYearId", leaveYearId) :
                new ObjectParameter("leaveYearId", typeof(int));
    
            var leaveTypeIdParameter = leaveTypeId.HasValue ?
                new ObjectParameter("leaveTypeId", leaveTypeId) :
                new ObjectParameter("leaveTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeaveApplicationEmployeeBalance_Result>("sp_LeaveApplicationEmployeeBalance", empCodeParameter, leaveYearIdParameter, leaveTypeIdParameter);
        }
    
        public virtual ObjectResult<sp_LeaveApplicationInsert_Result> sp_LeaveApplicationInsert(Nullable<int> leaveEmpCode, Nullable<int> leaveYearId, Nullable<int> leaveTypeId, Nullable<int> recommendedEmpCode, Nullable<int> recommendStatus, Nullable<int> leaveApproverEmpCode, Nullable<int> leaveStatus, Nullable<System.DateTime> leaveStartDate, Nullable<System.DateTime> leaveEndDate, Nullable<decimal> leaveDays, Nullable<bool> paidLeave, string leaveSubject, string leaveDetails, Nullable<System.DateTime> leaveAppliedDate, string leaveDaysType, string leaveDaysPart, string leaveGUICode, string recommenderMessage, Nullable<System.DateTime> recommendStatusDate)
        {
            var leaveEmpCodeParameter = leaveEmpCode.HasValue ?
                new ObjectParameter("LeaveEmpCode", leaveEmpCode) :
                new ObjectParameter("LeaveEmpCode", typeof(int));
    
            var leaveYearIdParameter = leaveYearId.HasValue ?
                new ObjectParameter("LeaveYearId", leaveYearId) :
                new ObjectParameter("LeaveYearId", typeof(int));
    
            var leaveTypeIdParameter = leaveTypeId.HasValue ?
                new ObjectParameter("LeaveTypeId", leaveTypeId) :
                new ObjectParameter("LeaveTypeId", typeof(int));
    
            var recommendedEmpCodeParameter = recommendedEmpCode.HasValue ?
                new ObjectParameter("RecommendedEmpCode", recommendedEmpCode) :
                new ObjectParameter("RecommendedEmpCode", typeof(int));
    
            var recommendStatusParameter = recommendStatus.HasValue ?
                new ObjectParameter("RecommendStatus", recommendStatus) :
                new ObjectParameter("RecommendStatus", typeof(int));
    
            var leaveApproverEmpCodeParameter = leaveApproverEmpCode.HasValue ?
                new ObjectParameter("LeaveApproverEmpCode", leaveApproverEmpCode) :
                new ObjectParameter("LeaveApproverEmpCode", typeof(int));
    
            var leaveStatusParameter = leaveStatus.HasValue ?
                new ObjectParameter("LeaveStatus", leaveStatus) :
                new ObjectParameter("LeaveStatus", typeof(int));
    
            var leaveStartDateParameter = leaveStartDate.HasValue ?
                new ObjectParameter("LeaveStartDate", leaveStartDate) :
                new ObjectParameter("LeaveStartDate", typeof(System.DateTime));
    
            var leaveEndDateParameter = leaveEndDate.HasValue ?
                new ObjectParameter("LeaveEndDate", leaveEndDate) :
                new ObjectParameter("LeaveEndDate", typeof(System.DateTime));
    
            var leaveDaysParameter = leaveDays.HasValue ?
                new ObjectParameter("LeaveDays", leaveDays) :
                new ObjectParameter("LeaveDays", typeof(decimal));
    
            var paidLeaveParameter = paidLeave.HasValue ?
                new ObjectParameter("PaidLeave", paidLeave) :
                new ObjectParameter("PaidLeave", typeof(bool));
    
            var leaveSubjectParameter = leaveSubject != null ?
                new ObjectParameter("LeaveSubject", leaveSubject) :
                new ObjectParameter("LeaveSubject", typeof(string));
    
            var leaveDetailsParameter = leaveDetails != null ?
                new ObjectParameter("LeaveDetails", leaveDetails) :
                new ObjectParameter("LeaveDetails", typeof(string));
    
            var leaveAppliedDateParameter = leaveAppliedDate.HasValue ?
                new ObjectParameter("LeaveAppliedDate", leaveAppliedDate) :
                new ObjectParameter("LeaveAppliedDate", typeof(System.DateTime));
    
            var leaveDaysTypeParameter = leaveDaysType != null ?
                new ObjectParameter("LeaveDaysType", leaveDaysType) :
                new ObjectParameter("LeaveDaysType", typeof(string));
    
            var leaveDaysPartParameter = leaveDaysPart != null ?
                new ObjectParameter("LeaveDaysPart", leaveDaysPart) :
                new ObjectParameter("LeaveDaysPart", typeof(string));
    
            var leaveGUICodeParameter = leaveGUICode != null ?
                new ObjectParameter("LeaveGUICode", leaveGUICode) :
                new ObjectParameter("LeaveGUICode", typeof(string));
    
            var recommenderMessageParameter = recommenderMessage != null ?
                new ObjectParameter("RecommenderMessage", recommenderMessage) :
                new ObjectParameter("RecommenderMessage", typeof(string));
    
            var recommendStatusDateParameter = recommendStatusDate.HasValue ?
                new ObjectParameter("RecommendStatusDate", recommendStatusDate) :
                new ObjectParameter("RecommendStatusDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeaveApplicationInsert_Result>("sp_LeaveApplicationInsert", leaveEmpCodeParameter, leaveYearIdParameter, leaveTypeIdParameter, recommendedEmpCodeParameter, recommendStatusParameter, leaveApproverEmpCodeParameter, leaveStatusParameter, leaveStartDateParameter, leaveEndDateParameter, leaveDaysParameter, paidLeaveParameter, leaveSubjectParameter, leaveDetailsParameter, leaveAppliedDateParameter, leaveDaysTypeParameter, leaveDaysPartParameter, leaveGUICodeParameter, recommenderMessageParameter, recommendStatusDateParameter);
        }
    
        public virtual ObjectResult<sp_LeaveApplicationLeaveRemTable_Result> sp_LeaveApplicationLeaveRemTable(Nullable<int> empCode, Nullable<int> leaveYearId)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var leaveYearIdParameter = leaveYearId.HasValue ?
                new ObjectParameter("LeaveYearId", leaveYearId) :
                new ObjectParameter("LeaveYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeaveApplicationLeaveRemTable_Result>("sp_LeaveApplicationLeaveRemTable", empCodeParameter, leaveYearIdParameter);
        }
    
        public virtual int sp_LeaveApplicationRecommendStatusChange(Nullable<int> leaveIdy, Nullable<int> status, string message)
        {
            var leaveIdyParameter = leaveIdy.HasValue ?
                new ObjectParameter("LeaveIdy", leaveIdy) :
                new ObjectParameter("LeaveIdy", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LeaveApplicationRecommendStatusChange", leaveIdyParameter, statusParameter, messageParameter);
        }
    
        public virtual ObjectResult<sp_LeaveApplicationsAdmin_Result> sp_LeaveApplicationsAdmin(Nullable<int> empCode, Nullable<int> year, Nullable<int> monthId)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthIdParameter = monthId.HasValue ?
                new ObjectParameter("monthId", monthId) :
                new ObjectParameter("monthId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeaveApplicationsAdmin_Result>("sp_LeaveApplicationsAdmin", empCodeParameter, yearParameter, monthIdParameter);
        }
    
        public virtual ObjectResult<sp_LeaveApplicationsApprove_Result> sp_LeaveApplicationsApprove(Nullable<int> empCode, Nullable<int> year, Nullable<int> monthId)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("empCode", empCode) :
                new ObjectParameter("empCode", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthIdParameter = monthId.HasValue ?
                new ObjectParameter("monthId", monthId) :
                new ObjectParameter("monthId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeaveApplicationsApprove_Result>("sp_LeaveApplicationsApprove", empCodeParameter, yearParameter, monthIdParameter);
        }
    
        public virtual ObjectResult<sp_LeaveApplicationsRecommend_Result> sp_LeaveApplicationsRecommend(Nullable<int> empCode, Nullable<int> year, Nullable<int> monthId)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("empCode", empCode) :
                new ObjectParameter("empCode", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthIdParameter = monthId.HasValue ?
                new ObjectParameter("monthId", monthId) :
                new ObjectParameter("monthId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeaveApplicationsRecommend_Result>("sp_LeaveApplicationsRecommend", empCodeParameter, yearParameter, monthIdParameter);
        }
    
        public virtual ObjectResult<sp_LeaveApplicationsUser_Result> sp_LeaveApplicationsUser(Nullable<int> empCode, Nullable<int> year, Nullable<int> monthId)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("empCode", empCode) :
                new ObjectParameter("empCode", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthIdParameter = monthId.HasValue ?
                new ObjectParameter("monthId", monthId) :
                new ObjectParameter("monthId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeaveApplicationsUser_Result>("sp_LeaveApplicationsUser", empCodeParameter, yearParameter, monthIdParameter);
        }
    
        public virtual ObjectResult<sp_LeaveApplicationValidLeaveType_Result> sp_LeaveApplicationValidLeaveType(Nullable<int> empCode)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeaveApplicationValidLeaveType_Result>("sp_LeaveApplicationValidLeaveType", empCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_LeaveApplicationYearUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_LeaveApplicationYearUser");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_LeaveApplyDuplicationCheck(Nullable<int> empCode, Nullable<System.DateTime> startdate, Nullable<System.DateTime> endDate)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("empCode", empCode) :
                new ObjectParameter("empCode", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_LeaveApplyDuplicationCheck", empCodeParameter, startdateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_LeaveApprover_Result> sp_LeaveApprover(Nullable<int> empCode, string approverType)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var approverTypeParameter = approverType != null ?
                new ObjectParameter("approverType", approverType) :
                new ObjectParameter("approverType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeaveApprover_Result>("sp_LeaveApprover", empCodeParameter, approverTypeParameter);
        }
    
        public virtual int sp_LeaveBalanceUpdate(Nullable<int> leaveId, Nullable<int> leaveStatus)
        {
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("LeaveId", leaveId) :
                new ObjectParameter("LeaveId", typeof(int));
    
            var leaveStatusParameter = leaveStatus.HasValue ?
                new ObjectParameter("LeaveStatus", leaveStatus) :
                new ObjectParameter("LeaveStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LeaveBalanceUpdate", leaveIdParameter, leaveStatusParameter);
        }
    
        public virtual int sp_leaveBalanceUpdateManually(Nullable<int> adminEmpCode)
        {
            var adminEmpCodeParameter = adminEmpCode.HasValue ?
                new ObjectParameter("AdminEmpCode", adminEmpCode) :
                new ObjectParameter("AdminEmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_leaveBalanceUpdateManually", adminEmpCodeParameter);
        }
    
        public virtual int sp_LeaveProcessMonthly(Nullable<int> leaveYearId, Nullable<int> monthNumber, Nullable<int> updatedByEmpCode)
        {
            var leaveYearIdParameter = leaveYearId.HasValue ?
                new ObjectParameter("leaveYearId", leaveYearId) :
                new ObjectParameter("leaveYearId", typeof(int));
    
            var monthNumberParameter = monthNumber.HasValue ?
                new ObjectParameter("MonthNumber", monthNumber) :
                new ObjectParameter("MonthNumber", typeof(int));
    
            var updatedByEmpCodeParameter = updatedByEmpCode.HasValue ?
                new ObjectParameter("updatedByEmpCode", updatedByEmpCode) :
                new ObjectParameter("updatedByEmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LeaveProcessMonthly", leaveYearIdParameter, monthNumberParameter, updatedByEmpCodeParameter);
        }
    
        public virtual int sp_LeaveProcessYearly(Nullable<int> previousLeaveYearId, Nullable<int> leaveYearId)
        {
            var previousLeaveYearIdParameter = previousLeaveYearId.HasValue ?
                new ObjectParameter("PreviousLeaveYearId", previousLeaveYearId) :
                new ObjectParameter("PreviousLeaveYearId", typeof(int));
    
            var leaveYearIdParameter = leaveYearId.HasValue ?
                new ObjectParameter("leaveYearId", leaveYearId) :
                new ObjectParameter("leaveYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LeaveProcessYearly", previousLeaveYearIdParameter, leaveYearIdParameter);
        }
    
        public virtual ObjectResult<sp_LeaveRecommender_Result> sp_LeaveRecommender(Nullable<int> empCode, string recommendType)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var recommendTypeParameter = recommendType != null ?
                new ObjectParameter("recommendType", recommendType) :
                new ObjectParameter("recommendType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeaveRecommender_Result>("sp_LeaveRecommender", empCodeParameter, recommendTypeParameter);
        }
    
        public virtual int sp_LeaveRuleDelete(Nullable<int> leaveRuleId)
        {
            var leaveRuleIdParameter = leaveRuleId.HasValue ?
                new ObjectParameter("LeaveRuleId", leaveRuleId) :
                new ObjectParameter("LeaveRuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LeaveRuleDelete", leaveRuleIdParameter);
        }
    
        public virtual int sp_LeaveRuleEmployeeSetup(Nullable<int> empCode, Nullable<int> leaveYearId)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var leaveYearIdParameter = leaveYearId.HasValue ?
                new ObjectParameter("leaveYearId", leaveYearId) :
                new ObjectParameter("leaveYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LeaveRuleEmployeeSetup", empCodeParameter, leaveYearIdParameter);
        }
    
        public virtual int sp_LeaveUpdateLeaveRuleByFY(Nullable<int> previousLeaveYearId, Nullable<int> leaveYearId)
        {
            var previousLeaveYearIdParameter = previousLeaveYearId.HasValue ?
                new ObjectParameter("PreviousLeaveYearId", previousLeaveYearId) :
                new ObjectParameter("PreviousLeaveYearId", typeof(int));
    
            var leaveYearIdParameter = leaveYearId.HasValue ?
                new ObjectParameter("leaveYearId", leaveYearId) :
                new ObjectParameter("leaveYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LeaveUpdateLeaveRuleByFY", previousLeaveYearIdParameter, leaveYearIdParameter);
        }
    
        public virtual int sp_LeaveUpdateLeaveRuleByMonthly(Nullable<int> leaveYearId, Nullable<int> monthNumber)
        {
            var leaveYearIdParameter = leaveYearId.HasValue ?
                new ObjectParameter("leaveYearId", leaveYearId) :
                new ObjectParameter("leaveYearId", typeof(int));
    
            var monthNumberParameter = monthNumber.HasValue ?
                new ObjectParameter("MonthNumber", monthNumber) :
                new ObjectParameter("MonthNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LeaveUpdateLeaveRuleByMonthly", leaveYearIdParameter, monthNumberParameter);
        }
    
        public virtual ObjectResult<sp_LeaveYearAdd_Result> sp_LeaveYearAdd(string yearName, Nullable<System.DateTime> yearStart, Nullable<System.DateTime> yearEnd, string yearStartNP, string yearEndNP, Nullable<bool> isActive)
        {
            var yearNameParameter = yearName != null ?
                new ObjectParameter("YearName", yearName) :
                new ObjectParameter("YearName", typeof(string));
    
            var yearStartParameter = yearStart.HasValue ?
                new ObjectParameter("YearStart", yearStart) :
                new ObjectParameter("YearStart", typeof(System.DateTime));
    
            var yearEndParameter = yearEnd.HasValue ?
                new ObjectParameter("YearEnd", yearEnd) :
                new ObjectParameter("YearEnd", typeof(System.DateTime));
    
            var yearStartNPParameter = yearStartNP != null ?
                new ObjectParameter("YearStartNP", yearStartNP) :
                new ObjectParameter("YearStartNP", typeof(string));
    
            var yearEndNPParameter = yearEndNP != null ?
                new ObjectParameter("YearEndNP", yearEndNP) :
                new ObjectParameter("YearEndNP", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeaveYearAdd_Result>("sp_LeaveYearAdd", yearNameParameter, yearStartParameter, yearEndParameter, yearStartNPParameter, yearEndNPParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_LeaveYearEdit_Result> sp_LeaveYearEdit(Nullable<int> yearId, string yearName, Nullable<System.DateTime> yearStart, Nullable<System.DateTime> yearEnd, string yearStartNP, string yearEndNP, Nullable<bool> isActive)
        {
            var yearIdParameter = yearId.HasValue ?
                new ObjectParameter("YearId", yearId) :
                new ObjectParameter("YearId", typeof(int));
    
            var yearNameParameter = yearName != null ?
                new ObjectParameter("YearName", yearName) :
                new ObjectParameter("YearName", typeof(string));
    
            var yearStartParameter = yearStart.HasValue ?
                new ObjectParameter("YearStart", yearStart) :
                new ObjectParameter("YearStart", typeof(System.DateTime));
    
            var yearEndParameter = yearEnd.HasValue ?
                new ObjectParameter("YearEnd", yearEnd) :
                new ObjectParameter("YearEnd", typeof(System.DateTime));
    
            var yearStartNPParameter = yearStartNP != null ?
                new ObjectParameter("YearStartNP", yearStartNP) :
                new ObjectParameter("YearStartNP", typeof(string));
    
            var yearEndNPParameter = yearEndNP != null ?
                new ObjectParameter("YearEndNP", yearEndNP) :
                new ObjectParameter("YearEndNP", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeaveYearEdit_Result>("sp_LeaveYearEdit", yearIdParameter, yearNameParameter, yearStartParameter, yearEndParameter, yearStartNPParameter, yearEndNPParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_MyRoleBusinessGroups_Result> sp_MyRoleBusinessGroups(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MyRoleBusinessGroups_Result>("sp_MyRoleBusinessGroups", roleIdParameter);
        }
    
        public virtual int sp_MyRoleOffices(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MyRoleOffices", roleIdParameter);
        }
    
        public virtual ObjectResult<sp_MyRoleOfficesList_Result> sp_MyRoleOfficesList(Nullable<int> empCode)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MyRoleOfficesList_Result>("sp_MyRoleOfficesList", empCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_MyRoleOfficesListIds(Nullable<int> empCode)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_MyRoleOfficesListIds", empCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_NepaliFiscalYearList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_NepaliFiscalYearList");
        }
    
        public virtual ObjectResult<sp_Notification_Result> sp_Notification(Nullable<int> empCode)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Notification_Result>("sp_Notification", empCodeParameter);
        }
    
        public virtual ObjectResult<sp_NotificationSingle_Result> sp_NotificationSingle(Nullable<int> notificationId)
        {
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NotificationSingle_Result>("sp_NotificationSingle", notificationIdParameter);
        }
    
        public virtual int sp_PayrollEmployeeTaxPivot(string empcode)
        {
            var empcodeParameter = empcode != null ?
                new ObjectParameter("empcode", empcode) :
                new ObjectParameter("empcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PayrollEmployeeTaxPivot", empcodeParameter);
        }
    
        public virtual int sp_payrollMonthGeneration(Nullable<int> fyId)
        {
            var fyIdParameter = fyId.HasValue ?
                new ObjectParameter("FyId", fyId) :
                new ObjectParameter("FyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_payrollMonthGeneration", fyIdParameter);
        }
    
        public virtual int sp_PayrollMonthlyAttendance(Nullable<int> employeeCode, Nullable<int> fyId, Nullable<int> monthId, Nullable<int> payrollSalaryTableId)
        {
            var employeeCodeParameter = employeeCode.HasValue ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(int));
    
            var fyIdParameter = fyId.HasValue ?
                new ObjectParameter("FyId", fyId) :
                new ObjectParameter("FyId", typeof(int));
    
            var monthIdParameter = monthId.HasValue ?
                new ObjectParameter("MonthId", monthId) :
                new ObjectParameter("MonthId", typeof(int));
    
            var payrollSalaryTableIdParameter = payrollSalaryTableId.HasValue ?
                new ObjectParameter("PayrollSalaryTableId", payrollSalaryTableId) :
                new ObjectParameter("PayrollSalaryTableId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PayrollMonthlyAttendance", employeeCodeParameter, fyIdParameter, monthIdParameter, payrollSalaryTableIdParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<sp_SearchEmployeeByRoleId_Result> sp_SearchEmployeeByRoleId(Nullable<int> officeId, Nullable<int> roleId)
        {
            var officeIdParameter = officeId.HasValue ?
                new ObjectParameter("OfficeId", officeId) :
                new ObjectParameter("OfficeId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SearchEmployeeByRoleId_Result>("sp_SearchEmployeeByRoleId", officeIdParameter, roleIdParameter);
        }
    
        public virtual int SP_SearchEmployees(Nullable<int> adminEmpCode, Nullable<int> empCode, string empNamey, Nullable<int> officeId, Nullable<int> deptId, Nullable<int> desgId, Nullable<int> groupId, Nullable<int> bgId, Nullable<int> roleID)
        {
            var adminEmpCodeParameter = adminEmpCode.HasValue ?
                new ObjectParameter("AdminEmpCode", adminEmpCode) :
                new ObjectParameter("AdminEmpCode", typeof(int));
    
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var empNameyParameter = empNamey != null ?
                new ObjectParameter("EmpNamey", empNamey) :
                new ObjectParameter("EmpNamey", typeof(string));
    
            var officeIdParameter = officeId.HasValue ?
                new ObjectParameter("OfficeId", officeId) :
                new ObjectParameter("OfficeId", typeof(int));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var desgIdParameter = desgId.HasValue ?
                new ObjectParameter("DesgId", desgId) :
                new ObjectParameter("DesgId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var bgIdParameter = bgId.HasValue ?
                new ObjectParameter("BgId", bgId) :
                new ObjectParameter("BgId", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SearchEmployees", adminEmpCodeParameter, empCodeParameter, empNameyParameter, officeIdParameter, deptIdParameter, desgIdParameter, groupIdParameter, bgIdParameter, roleIDParameter);
        }
    
        public virtual int Sp_TrainingAttendanceRecord(Nullable<int> trainingId, string mode)
        {
            var trainingIdParameter = trainingId.HasValue ?
                new ObjectParameter("TrainingId", trainingId) :
                new ObjectParameter("TrainingId", typeof(int));
    
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_TrainingAttendanceRecord", trainingIdParameter, modeParameter);
        }
    
        public virtual int sp_UpdateCanceledHoliday(Nullable<int> holidayId)
        {
            var holidayIdParameter = holidayId.HasValue ?
                new ObjectParameter("HolidayId", holidayId) :
                new ObjectParameter("HolidayId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateCanceledHoliday", holidayIdParameter);
        }
    
        public virtual int sp_updateDailyattendance(Nullable<bool> isAbsent, Nullable<System.DateTime> checkIn, Nullable<System.DateTime> checkOut, Nullable<int> empcode, Nullable<System.DateTime> date)
        {
            var isAbsentParameter = isAbsent.HasValue ?
                new ObjectParameter("isAbsent", isAbsent) :
                new ObjectParameter("isAbsent", typeof(bool));
    
            var checkInParameter = checkIn.HasValue ?
                new ObjectParameter("CheckIn", checkIn) :
                new ObjectParameter("CheckIn", typeof(System.DateTime));
    
            var checkOutParameter = checkOut.HasValue ?
                new ObjectParameter("CheckOut", checkOut) :
                new ObjectParameter("CheckOut", typeof(System.DateTime));
    
            var empcodeParameter = empcode.HasValue ?
                new ObjectParameter("Empcode", empcode) :
                new ObjectParameter("Empcode", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updateDailyattendance", isAbsentParameter, checkInParameter, checkOutParameter, empcodeParameter, dateParameter);
        }
    
        public virtual int sp_UpdateEmpRole(Nullable<int> empcode, Nullable<int> roleId)
        {
            var empcodeParameter = empcode.HasValue ?
                new ObjectParameter("Empcode", empcode) :
                new ObjectParameter("Empcode", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateEmpRole", empcodeParameter, roleIdParameter);
        }
    
        public virtual int sp_UpdateErrorAttendance(Nullable<int> empcode, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var empcodeParameter = empcode.HasValue ?
                new ObjectParameter("Empcode", empcode) :
                new ObjectParameter("Empcode", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("Enddate", enddate) :
                new ObjectParameter("Enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateErrorAttendance", empcodeParameter, startdateParameter, enddateParameter);
        }
    
        public virtual int sp_UpdateHoliday(Nullable<System.DateTime> holidayDate)
        {
            var holidayDateParameter = holidayDate.HasValue ?
                new ObjectParameter("HolidayDate", holidayDate) :
                new ObjectParameter("HolidayDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateHoliday", holidayDateParameter);
        }
    
        public virtual int sp_UpdateHolidayRecord(Nullable<int> holidayId, Nullable<int> hOfficeId, Nullable<int> hReligionId, Nullable<int> hEthnicityId, string hGender, Nullable<System.DateTime> holidayDate)
        {
            var holidayIdParameter = holidayId.HasValue ?
                new ObjectParameter("HolidayId", holidayId) :
                new ObjectParameter("HolidayId", typeof(int));
    
            var hOfficeIdParameter = hOfficeId.HasValue ?
                new ObjectParameter("HOfficeId", hOfficeId) :
                new ObjectParameter("HOfficeId", typeof(int));
    
            var hReligionIdParameter = hReligionId.HasValue ?
                new ObjectParameter("HReligionId", hReligionId) :
                new ObjectParameter("HReligionId", typeof(int));
    
            var hEthnicityIdParameter = hEthnicityId.HasValue ?
                new ObjectParameter("HEthnicityId", hEthnicityId) :
                new ObjectParameter("HEthnicityId", typeof(int));
    
            var hGenderParameter = hGender != null ?
                new ObjectParameter("HGender", hGender) :
                new ObjectParameter("HGender", typeof(string));
    
            var holidayDateParameter = holidayDate.HasValue ?
                new ObjectParameter("HolidayDate", holidayDate) :
                new ObjectParameter("HolidayDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateHolidayRecord", holidayIdParameter, hOfficeIdParameter, hReligionIdParameter, hEthnicityIdParameter, hGenderParameter, holidayDateParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SpDailyAttRecordGenerate(Nullable<System.DateTime> dailyDate)
        {
            var dailyDateParameter = dailyDate.HasValue ?
                new ObjectParameter("DailyDate", dailyDate) :
                new ObjectParameter("DailyDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDailyAttRecordGenerate", dailyDateParameter);
        }
    
        public virtual ObjectResult<SpGetDevice_Result> SpGetDevice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDevice_Result>("SpGetDevice");
        }
    
        public virtual int SpInsertAttendanceLog(Nullable<int> machineId, string ipAddress, string enrollNumber, Nullable<int> verifyMode, Nullable<int> inOutMode, Nullable<System.DateTime> logDate, Nullable<System.TimeSpan> logTime, Nullable<int> workCode, Nullable<System.DateTime> createdAt, Nullable<int> attTypeId, Nullable<int> readStatus)
        {
            var machineIdParameter = machineId.HasValue ?
                new ObjectParameter("MachineId", machineId) :
                new ObjectParameter("MachineId", typeof(int));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var enrollNumberParameter = enrollNumber != null ?
                new ObjectParameter("EnrollNumber", enrollNumber) :
                new ObjectParameter("EnrollNumber", typeof(string));
    
            var verifyModeParameter = verifyMode.HasValue ?
                new ObjectParameter("VerifyMode", verifyMode) :
                new ObjectParameter("VerifyMode", typeof(int));
    
            var inOutModeParameter = inOutMode.HasValue ?
                new ObjectParameter("InOutMode", inOutMode) :
                new ObjectParameter("InOutMode", typeof(int));
    
            var logDateParameter = logDate.HasValue ?
                new ObjectParameter("LogDate", logDate) :
                new ObjectParameter("LogDate", typeof(System.DateTime));
    
            var logTimeParameter = logTime.HasValue ?
                new ObjectParameter("LogTime", logTime) :
                new ObjectParameter("LogTime", typeof(System.TimeSpan));
    
            var workCodeParameter = workCode.HasValue ?
                new ObjectParameter("WorkCode", workCode) :
                new ObjectParameter("WorkCode", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var attTypeIdParameter = attTypeId.HasValue ?
                new ObjectParameter("AttTypeId", attTypeId) :
                new ObjectParameter("AttTypeId", typeof(int));
    
            var readStatusParameter = readStatus.HasValue ?
                new ObjectParameter("ReadStatus", readStatus) :
                new ObjectParameter("ReadStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInsertAttendanceLog", machineIdParameter, ipAddressParameter, enrollNumberParameter, verifyModeParameter, inOutModeParameter, logDateParameter, logTimeParameter, workCodeParameter, createdAtParameter, attTypeIdParameter, readStatusParameter);
        }
    
        public virtual int SpUpdateAttendanceDeviceFetchInfomation(Nullable<int> deviceId, Nullable<System.DateTime> deviceFetchStartTime, Nullable<System.DateTime> deviceFetchEndTime, Nullable<System.DateTime> deviceLastImportDate)
        {
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(int));
    
            var deviceFetchStartTimeParameter = deviceFetchStartTime.HasValue ?
                new ObjectParameter("DeviceFetchStartTime", deviceFetchStartTime) :
                new ObjectParameter("DeviceFetchStartTime", typeof(System.DateTime));
    
            var deviceFetchEndTimeParameter = deviceFetchEndTime.HasValue ?
                new ObjectParameter("DeviceFetchEndTime", deviceFetchEndTime) :
                new ObjectParameter("DeviceFetchEndTime", typeof(System.DateTime));
    
            var deviceLastImportDateParameter = deviceLastImportDate.HasValue ?
                new ObjectParameter("DeviceLastImportDate", deviceLastImportDate) :
                new ObjectParameter("DeviceLastImportDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateAttendanceDeviceFetchInfomation", deviceIdParameter, deviceFetchStartTimeParameter, deviceFetchEndTimeParameter, deviceLastImportDateParameter);
        }
    
        public virtual int UpdateIndividualAttandance(Nullable<System.DateTime> startdate, Nullable<int> empcode, Nullable<System.DateTime> enddate)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var empcodeParameter = empcode.HasValue ?
                new ObjectParameter("empcode", empcode) :
                new ObjectParameter("empcode", typeof(int));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIndividualAttandance", startdateParameter, empcodeParameter, enddateParameter);
        }
    
        public virtual ObjectResult<USP_GETEMPLOYEEDETAILS_Result> USP_GETEMPLOYEEDETAILS(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GETEMPLOYEEDETAILS_Result>("USP_GETEMPLOYEEDETAILS", idParameter);
        }
    }
}
