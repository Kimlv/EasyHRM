@model BeeHRM.ApplicationService.DTOs.OfficeDTOs

@{
    ViewBag.Title = "BranchCreate";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section SideBar{
    <div class="wrapper container-fluid" id="wrapper">
        <div id="sidebar-wrapper" class="menusBg menusColor">
            <ul class="sidebar-nav">
                @foreach (var item in ViewBag.SideBar)
                {
                    <li><a href="@item.MduleLink"><i class="@item.ModuleCssClass" aria-hidden="true"></i> @Html.Raw(item.MOduleName)</a></li>
                }
            </ul>
        </div>
    </div>
}
@section PageHeader{
    <div class="small-header">
        <div class="hpanel">
            <div class="panel-body">
                <div id="hbreadcrumb" class="pull-right">
                    <ol class="hbreadcrumb breadcrumb">
                        <li class="active"><span><a href='@Url.Action("index","Branch")' class="btn btn-success"><i class="fa fa-bars" aria-hidden="true"></i> View</a></span></li>
                    </ol>
                </div>
                <h2 class="font-light m-b-xs">
                    Branch
                    <small>Add New</small>
                </h2>
            </div>
        </div>
    </div>
}

@if (ViewBag.Success != null)
{
    <div class="alert alert-success">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
        <i class="fa fa-check" aria-hidden="true"></i> @ViewBag.Success
    </div>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="box box-top-border">
        <div class="box-body">
            <div class="row">
                <div class="col-lg-8 ">
                    <div class="box-body">
                        <div class="well box box-primary">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group">
                                @{
                                    List<SelectListItem> listforOffice = new List<SelectListItem>();
                                    listforOffice.Add(new SelectListItem
                                    {
                                        Text = "None",
                                        Value = "0"
                                    });
                                    foreach (var row in ViewBag.officeList)
                                    {
                                        listforOffice.Add(new SelectListItem
                                        {
                                            Text = row.OfficeName,
                                            Value = row.OfficeId.ToString()
                                        });
                                    }

                                }
                                @Html.LabelFor(model => model.OfficeParentId, "Choose parent branch")
                                @Html.DropDownListFor(model => model.OfficeParentId, listforOffice, new { @class = "form-control", required = "required" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.OfficeCode, "Office Code(*)")

                                @Html.EditorFor(model => model.OfficeCode, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                @Html.ValidationMessageFor(model => model.OfficeCode, "", new { @class = "text-danger" })

                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.OfficeName, "Office Name(*)")

                                @Html.EditorFor(model => model.OfficeName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                @Html.ValidationMessageFor(model => model.OfficeName, "", new { @class = "text-danger" })

                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.OfficeAddress, "Office Address")

                                @Html.EditorFor(model => model.OfficeAddress, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.OfficeAddress, "", new { @class = "text-danger" })

                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.OfficePhone, "Phone No.")

                                @Html.EditorFor(model => model.OfficePhone, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.OfficePhone, "", new { @class = "text-danger" })

                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.OfficeGeoLocation, "Location")

                                @Html.EditorFor(model => model.OfficeGeoLocation, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.OfficeGeoLocation, "", new { @class = "text-danger" })

                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.OfficeStatus, "Office Status")

                                @Html.EditorFor(model => model.OfficeStatus, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.OfficeStatus, "", new { @class = "text-danger" })

                            </div>
                            <div class="form-group">
                                @{
                                    List<SelectListItem> listforOfficeType = new List<SelectListItem>();
                                    foreach (var row in ViewBag.officeTypeList)
                                    {
                                        listforOfficeType.Add(new SelectListItem
                                        {
                                            Text = row.OfficeTypeName,
                                            Value = row.OfficeTypeId.ToString()
                                        });
                                    }

                                }
                                @Html.LabelFor(model => model.OfficeTypeId, "Choose branch type")
                                @Html.DropDownListFor(model => model.OfficeTypeId, listforOfficeType, new { @class = "form-control" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Employee.EmpName, "Office Head")

                                @Html.DropDownListFor(model => model.OfficeHeadEmpCode, Model.EmployeeList, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Employee.EmpCode, "", new { @class = "text-danger" })

                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.PayrollRemoteSetup.RemoteName, "Remote Name")

                                @Html.DropDownListFor(model => model.PayrollRemmoteSetupRemoteId, Model.RemoteList, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PayrollRemoteSetup.RemoteId, "", new { @class = "text-danger" })

                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.IsActive, "Is Active")
                                @Html.CheckBoxFor(model => model.IsActive)
                            </div>

                            <div class="box-footer">
                                <input type="submit" value="Save" class="btn btn-success" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

                                    }
